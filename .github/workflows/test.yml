name: Test & Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  # MIN_COVERAGE: 80 # TODO: Add --fail-under
  REDIS_HOST: redis
  SRH_HOST: srh

jobs:
  test:
    timeout-minutes: 30
    name: Test & Coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:0.31.4
      options: --security-opt seccomp=unconfined
      env:
        REDIS_HOST: redis
        SRH_HOST: srh

    services:
      redis:
        image: redis/redis-stack-server:6.2.6-v6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      srh:
        image: hiett/serverless-redis-http:latest
        env:
          SRH_MODE: standalone
          SRH_REDIS_URL: redis://redis:6379
        ports:
          - 8079:80

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: |
          apt-get update && apt-get install -y jq

      - name: Create Turso Test Database
        id: create_db
        run: |
          # Create the new database
          echo "Creating database: ${{ github.ref_name }}_${{ github.run_id }}"

          CREATE_RESPONSE=$(curl -L -X POST "https://api.turso.tech/v1/organizations/${{ secrets.TURSO_ORGANIZATION_NAME }}/databases" \
            -H "Authorization: Bearer ${{ secrets.TURSO_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "${{ github.ref_name }}_${{ github.run_id }}",
              "group": "default",
              "seed": {
                "type": "database",
                "name": "${{ secrets.TURSO_EXISTING_DATABASE_NAME }}"
              }
            }')

          echo "Database created successfully"

      - name: Get Database Token
        run: |
          curl -sSf https://github.com/tursodatabase/turso-cli/releases/download/v1.0.0/turso_Linux_x86_64.tar.gz | tar -xz
          ./turso auth login --token ${{ secrets.TURSO_API_TOKEN }}
          ./turso db tokens create ${{ github.ref_name }}_${{ github.run_id }} --expiration 1h > token.txt
          echo "TURSO_TOKEN=$(cat token.txt)" >> $GITHUB_ENV
          echo "TURSO_URL=libsql://${{ github.ref_name }}_${{ github.run_id }}.turso.io" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/toolchains/ 
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Run tests with coverage
        id: coverage
        env:
          TURSO_URL: ${{ env.TURSO_URL }}
          TURSO_TOKEN: ${{ env.TURSO_TOKEN }}
        run: |
          cargo tarpaulin --out xml
        # --fail-under $MIN_COVERAGE # TODO

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Cleanup Turso Database
        if: always()
        run: |
          ./turso db destroy ${{ github.ref_name }}_${{ github.run_id }} --yes
